import telebot
from telebot import types
import time 
import random
import logging
import json
import os
import threading
from pyCryptoPayAPI import pyCryptoPayAPI
import math
from pyrogram import Client
from telethon import TelegramClient, events
from telethon.sessions import StringSession
import asyncio
from threading import Thread
import sqlite3
from telethon.errors import SessionPasswordNeededError
import re
from telethon.sessions import StringSession, SQLiteSession
from typing import Dict, Any








#------data-----------
TOKEN = '8387349171:AAH6SSWWEGqB6MBVYuJv9X_ndrA4oZrciIU'
TESTBOTTOKEN = '8359013435:AAGarvn9AmWfRlfGD1PcJtoVnpjBZEOtamI'
PAYMASTERKEY = '1744374395:TEST:0933cf0533093760f40a'
CRYPTOPAYTOKEN = '440288:AAu4JoPgW6aRAGoEbo3wFQlpZ3XZfhYSZcl'
TESTTOKEN = '45260:AAEb9GvuXnb9OFkJzWr6VejcQav1g9zQseB'
CARD = 2200701347647254
CHANNEL_ID = '@neganworks'
ADMINID = [768223541, 7220303850]
user_data = {}
current_message = {}
proxy = ('HTTP', '191.96.125.154', 8991, True, 'user314167', '3teq8a')

crypto = pyCryptoPayAPI(api_token=CRYPTOPAYTOKEN, test_net=False)
bot = telebot.TeleBot(token=TOKEN)

# –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
API_ID = 24476076  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
API_HASH = 'ee71cff9806c0c865b24ebdc9168fa68'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Hash

user_states = {}

class TelegramFileSender:
    def __init__(self):
        self.channel_id = '-1002323342468'  # –ù–∞–ø—Ä–∏–º–µ—Ä: '-1001234567890'
        self.interval = 50  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (60 = 1 –º–∏–Ω—É—Ç–∞)
        self.running = False
        self.thread = None

    def send_json_files(self):
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ JSON-—Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                
                time.sleep(self.interval)

                try:
                    with open('users.json', 'rb') as file:
                        bot.send_document(
                            chat_id=self.channel_id,
                            document=file,
                            caption=f"–§–∞–π–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
                        )
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {e}")

                try:
                    with open('lots.json', 'rb') as file:
                        bot.send_document(
                            chat_id=self.channel_id,
                            document=file,
                            caption=f"–§–∞–π–ª: –ª–æ—Ç—ã"
                        )
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: –ª–æ—Ç—ã")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ—Ç—ã: {e}")
                try:
                    with open('cards.json', 'rb') as file:
                        bot.send_document(
                            chat_id=self.channel_id,
                            document=file,
                            caption=f"–§–∞–π–ª: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
                        )
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

            except Exception as e:
                print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

            time.sleep(self.interval)

    def start(self):
        if not self.running:
            self.running = True
            self.thread = threading.Thread(target=self.send_json_files)
            self.thread.daemon = True  # –î–µ–º–æ–Ω-–ø–æ—Ç–æ–∫ (–∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π)
            self.thread.start()
            print("–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω")

    def stop(self):
        self.running = False
        if self.thread:
            self.thread.join()
        print("–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


TelegramFileSender().start()

    

class JsonDataCleaner:
    def __init__(self, file_path: str, data_to_remove: Dict[str, Any]):
        """
        :param file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        :param data_to_remove: –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è)
        """
        self.file_path = file_path
        self.data_to_remove = data_to_remove
        self.timer = None

    def start_cleanup_timer(self, delay_minutes: int = 5):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç"""
        delay_seconds = delay_minutes * 60
        self.timer = threading.Timer(delay_seconds, self.cleanup_data)
        self.timer.start()
        print(f"–¢–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {delay_minutes} –º–∏–Ω—É—Ç")

    def cleanup_data(self):
        """–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(self.file_path):
                print(f"–§–∞–π–ª {self.file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            with open(self.file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –£–¥–∞–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            original_size = len(json.dumps(data))
            for key in self.data_to_remove:
                if key in data:
                    del data[key]

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if len(json.dumps(data)) != original_size:
                with open(self.file_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=4, ensure_ascii=False)
                print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            else:
                print("–î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.timer = None

    def cancel_cleanup(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É"""
        if self.timer:
            self.timer.cancel()
            print("–¢–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω")
            self.timer = None

class TelegramAuth:
    def __init__(self):
        self.clients = {}
        self.loop = asyncio.get_event_loop()

    async def _create_client(self, phone):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ Telethon –¥–ª—è –Ω–æ–º–µ—Ä–∞"""
        session = StringSession()
        client = TelegramClient(
            session,
            API_ID,
            API_HASH,
            device_model="iPhone 14 Pro",
            system_version="19.0",
            app_version="8.4",
            lang_code="en",
            system_lang_code="en-US",
            proxy=proxy
        )
        self.clients[phone] = client
        return client

    async def _send_code(self, phone, chat_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            client = await self._create_client(phone)
            await client.connect()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–¥–∞
            await asyncio.sleep(2)
            
            code_request = await client.send_code_request(phone)
            user_states[chat_id] = {
                'phone': phone,
                'code_hash': code_request.phone_code_hash,
                'waiting_code': True,
                'waiting_password': False
            }
            bot.send_message(chat_id, "üîë –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            if 'client' in locals():
                await asyncio.sleep(2)
                await client.disconnect()

    async def _confirm_code(self, chat_id, code):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if chat_id not in user_states:
            return False

        data = user_states[chat_id]
        client = self.clients.get(data['phone'])
        
        if not client:
            return False

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
            await client.sign_in(
                phone=data['phone'],
                code=code,
                phone_code_hash=data['code_hash']
            )
            await asyncio.sleep(2)
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - 2FA –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            return await self._save_session_and_cleanup(client, data['phone'], chat_id)
            
        except SessionPasswordNeededError:
            # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA
            user_states[chat_id]['waiting_password'] = True
            user_states[chat_id]['waiting_code'] = False
            bot.send_message(chat_id, "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def _confirm_password(self, chat_id, password):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è 2FA"""
        if chat_id not in user_states:
            return False
        await asyncio.sleep(2)
        data = user_states[chat_id]
        client = self.clients.get(data['phone'])
        if not client:
            return False

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º 2FA
            await client.sign_in(password=password)
            return await self._save_session_and_cleanup(client, data['phone'], chat_id)
            await asyncio.sleep(2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è 2FA: {e}")
            return False

    async def _save_session_and_cleanup(self, client, phone, chat_id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É"""
        try:
            session_file = f"sessions/{phone.replace('+', '')}.session"
            os.makedirs("sessions", exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏
            session_string = client.session.save()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ –ø—É—Å—Ç–∞—è
            if not session_string:
                raise ValueError("Empty session string")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(session_file, 'w') as f:
                f.write(session_string)
            if os.path.exists(session_file):
                try:
                    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é
                    with open(session_file, 'r') as f:
                        session_string = f.read()
                    
                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    if not session_string or len(session_string) < 10:
                        os.remove(session_file)
                        return {"error": "Invalid session, please re-auth"}
                except:
                    os.remove(session_file)
                    return {"error": "Corrupted session, please re-auth"}
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
        finally:
            await client.disconnect()
            self.clients.pop(phone, None)
            user_states.pop(chat_id, None)
        

    def start_auth(self, phone, chat_id):
        asyncio.set_event_loop(self.loop)
        self.loop.run_until_complete(self._send_code(phone, chat_id))

    def confirm_code(self, chat_id, code):
        asyncio.set_event_loop(self.loop)
        return self.loop.run_until_complete(self._confirm_code(chat_id, code))

    def confirm_password(self, chat_id, password):
        asyncio.set_event_loop(self.loop)
        return self.loop.run_until_complete(self._confirm_password(chat_id, password))

async def wait_for_verification_code(phone_number, timeout=300):
    """
    –û–∂–∏–¥–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç Telegram
    :param phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+7...)
    :param timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
    :return: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏/—Ç–∞–π–º–∞—É—Ç–∞
    """
    clean_phone = phone_number.replace('+', '')
    session_path = f"sessions/{clean_phone}.session"
    await asyncio.sleep(2)
    if not os.path.exists(session_path):
        print(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_path}")
        return None

    client = None
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–µ—Å—Å–∏–∏
        with open(session_path, 'r') as f:
            content = f.read().strip()
        
        session = StringSession(content) if content.startswith('1') and len(content) > 100 else SQLiteSession(session_path)
        
        client = TelegramClient(
            session,
            api_id=API_ID,          # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_ID
            api_hash=API_HASH,
            proxy=proxy     # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_HASH
        )
        await asyncio.sleep(2)
        await client.connect()
        
        if not await client.is_user_authorized():
            with open('lots.json', 'r', encoding='utf8')as f:
                data = json.load(f)
            bot.send_message(chat_id=data[phone_number]['buyer'], text=f'–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞\n–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', parse_mode='Markdown')

        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–¥–∞
        code_received = asyncio.Event()
        verification_code = None

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @client.on(events.NewMessage(incoming=True))
        async def handler(event):
            nonlocal verification_code
            text = event.message.text
            code = extract_verification_code(text, phone_number)
            if code:
                verification_code = code
                code_received.set()

        await asyncio.sleep(2)
        try:
            # –ñ–¥–µ–º –∫–æ–¥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            await asyncio.wait_for(code_received.wait(), timeout=timeout)
            return verification_code
        except asyncio.TimeoutError:
            with open('lots.json', 'r', encoding='utf8')as f:
                data = json.load(f)
            bot.send_message(chat_id=data[phone_number]['buyer'], text=f'–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω', parse_mode='Markdown')
            return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None
    finally:
        if client and client.is_connected():
            await asyncio.sleep(2)
            await client.disconnect()
            print("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

def extract_verification_code(text, phone_number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return None
    
    # –¢–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–æ–¥–æ–≤ Telegram
    patterns = [
        r'\b\d{5}\b',                     # –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 5 —Ü–∏—Ñ—Ä
        r'–∫–æ–¥[: ]*(\d{5})',               # –ö–æ–¥: 12345
        r'code[: ]*(\d{5})',              # Code: 12345
        r'verify[: ]*(\d{5})',            # Verify: 12345
        r'–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏[:–µ—è ]*(\d{5})'     # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: 12345
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            code = match.group(1) if len(match.groups()) > 0 else match.group(0)
            if code.isdigit() and len(code) == 5:
                with open('lots.json', 'r', encoding='utf8')as f:
                    data = json.load(f)
                bot.send_message(chat_id=data[phone_number]['buyer'], text=f'–í–∞—à –∫–æ–¥: `{code}`', parse_mode='Markdown')
                os.remove(f'sessions/{phone_number}.session')
                bot.send_message(chat_id=data[phone_number]['buyer'], text=f'–°–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —É–¥–∞–ª–µ–Ω–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞\n*–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ!*', parse_mode='Markdown')
                return code
    return None



def get_last_code_sync(phone_number):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(wait_for_verification_code(phone_number))
    except Exception as e:
        return verify_code.update({phone_number: f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}'})
    finally:
        loop.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
tg_auth = TelegramAuth()
verify_code = {}



def paid(id, filename='paid.txt'):
    if checkinvoice(id, filename):
        return True 
    with open(filename, 'a') as file:
        file.write(f"{id}\n")
    return False

def checkinvoice(id, filename='paid.txt'):
    try:
        with open(filename, 'r') as file:
            for line in file:
                if line.strip() == str(id):
                    return True 
    except FileNotFoundError:
        return False
    return False  

def load_users():
    try:
        with open('users.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        print('oshibka')
        data = {}
    return data

def create_invoice(m):
    try:
        amount = float(m.text)
        invoice = crypto.create_invoice(asset='USDT', amount=amount, description='üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Negan —Ñ–∏–∑—à–æ–ø', hidden_message='–ë–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω.')
        print(invoice['status'])
        mrk = types.InlineKeyboardMarkup(row_width=1)
        but1 = types.InlineKeyboardButton(text='‚úî –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç', url=invoice['pay_url'])
        but2 = types.InlineKeyboardButton(text='‚ö° –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data=f'–æ–ø–ª–∞—Ç–∏–ª{invoice["invoice_id"]}')
        but5  = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        mrk.add(but5)
        mrk.add(but1, but2)
        mes = bot.send_message(chat_id=m.from_user.id, text=f'–°—á–µ—Ç –Ω–∞ —Å—É–º–º—É *{amount}*$ —Å–æ–∑–¥–∞–Ω, _–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç –Ω–∏–∂–µ_', parse_mode='Markdown', reply_markup=mrk)
        current_message.update({str(call.from_user.id): mes.message_id})
    except Exception as e:
        print(e)
        bot.send_message(chat_id=m.from_user.id, text='*–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞*!', parse_mode='Markdown')

def update_balance(user_id, amount_to_add, filename='users.json'):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        if user_id in data:
            current_balance = data[user_id]['balance']
            new_balance = current_balance + amount_to_add
            data[user_id]['balance'] = new_balance
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            return new_balance
        else:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

def deupdate_balance(user_id, amount_to_min, filename='users.json'):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        if user_id in data:
            current_balance = data[user_id]['balance']
            new_balance = current_balance - amount_to_min
            data[user_id]['balance'] = new_balance
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            return new_balance
        else:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None



def adminacc(m):
    if m.content_type == 'photo':
        mrk = types.InlineKeyboardMarkup(row_width=1)
        but1 = types.InlineKeyboardButton(text='‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å{m.from_user.id}')
        but2 = types.InlineKeyboardButton(text='‚ùå –ß–µ–∫ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π', callback_data=f'‚ùå –ß–µ–∫ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π{m.from_user.id}')
        mrk.row(but1, but2)
        for id in ADMINID:
            bot.forward_message(chat_id=id, from_chat_id=m.from_user.id, message_id=m.message_id)
            bot.send_message(chat_id=id, text=f'*–ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {m.from_user.id} ({m.from_user.username})*', parse_mode='Markdown', reply_markup=mrk)
        bot.send_message(chat_id=m.from_user.id, text=f'*–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞*', parse_mode='Markdown')
    else:
        bot.send_message(chat_id=m.from_user.id, text=f'*–ß–µ–∫ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!*', parse_mode='Markdown')

def next_step_card(m):
    try:
        with open('cards.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    try:
        if not str(m.from_user.id) in data:
            amount = float(m.text)
            with open('cards.json', 'w', encoding='utf8')as f:
                data[str(m.from_user.id)] = {
                    'amount': amount
                }
                json.dump(data, f, ensure_ascii=False, indent=4)
            mrk = types.InlineKeyboardMarkup(row_width=1)
            but5  = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            mrk.add(but5)
            x = bot.send_message(chat_id=m.from_user.id, text=f'*–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ {m.from_user.id}*\n—Å—É–º–º–∞: `{amount}`\n–ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: `{CARD}`\n\n–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É\n\n*–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º*', parse_mode='Markdown', reply_markup=mrk)
            current_message.update({str(m.from_user.id): x.message_id})
            clean = JsonDataCleaner(file_path='cards.json', data_to_remove={str(m.from_user.id): None, 'amount': None})
            clean.start_cleanup_timer(delay_minutes=5)
            bot.register_next_step_handler(x, adminacc)
        else:
            bot.send_message(chat_id=m.from_user.id, text=f'*–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!*', parse_mode='Markdown')
    except Exception as e:
        print(e)
        bot.send_message(chat_id=m.from_user.id, text='*–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞*!', parse_mode='Markdown')

def remove_dict_from_json(key_to_remove, file_path='cards.json'):
    
    with open(file_path, 'r') as file:
        data = json.load(file)
    if key_to_remove in data:
        del data[key_to_remove]
        print(f"–°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º '{key_to_remove}' –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    else:
        print(f"–°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º '{key_to_remove}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    with open(file_path, 'w') as file:
        json.dump(data, file, indent=4)

def support_next_step(m):
    uid = random.randint(100, 99999)
    try:
        with open('support.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
        print('y')
    print('z')
    
    if not str(uid) in data:
        print('x')
        data[str(uid)] = {
            'id': str(m.from_user.id),
            'text': str(m.text)
        }
        with open('support.json', 'w', encoding='utf8')as x:
            json.dump(data, x, ensure_ascii=False, indent=4)
    else:
        support_next_step
        return None
    for id in ADMINID:
        try:
            bot.send_message(chat_id=id, text=f'*–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{uid} –æ—Ç {m.from_user.username}*:\n{m.text}', parse_mode='Markdown')
        except: pass
    mrk = types.InlineKeyboardMarkup(row_width=1)
    but4 = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    mrk.add(but4)
    mes = bot.send_message(chat_id=m.from_user.id, text=f'–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ. –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: *‚Ññ{uid}*', parse_mode='Markdown', reply_markup=mrk)
    current_message.update({str(m.from_user.id): mes.message_id})

def codesend(m):
    with open('lots.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    mrk = types.InlineKeyboardMarkup(row_width=1)
    mrk.add(types.InlineKeyboardButton(text='üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥', callback_data=f'üì≤ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥{numbertosend}'))
    bot.send_message(chat_id=data[numbertosend]['buyer'], text=f'–í–∞—à –∫–æ–¥: `{m.text}`\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É!', parse_mode='Markdown', reply_markup=mrk)

@bot.message_handler(['start'])
def start(m: types.Message):
    chat_member = bot.get_chat_member(chat_id='@stillnegan', user_id=m.from_user.id)
    if chat_member.status in ['member', 'administrator', 'creator']:
        pass
    else:
        mrkx = types.InlineKeyboardMarkup(row_width=2)
        mrkx.add(types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—Å—è ‚ûï', url='https://t.me/stillnegan'))
        bot.send_message(chat_id=m.from_user.id, text=f'*–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª*\n_—Ç—É–¥–∞ –±—É–¥—É—Ç –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—Å—è –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–∞—Ü–∏—è –ø–æ–ª–µ–∑–Ω–∞—è –¥–ª—è –≤–∞—Å_\n', parse_mode='Markdown', reply_markup=mrkx)
        return None
    mrk = types.InlineKeyboardMarkup(row_width=1)
    but1 = types.InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='üë§ –ü—Ä–æ—Ñ–∏–ª—å')
    but2 = types.InlineKeyboardButton(text='üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', callback_data='üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
    but3 = types.InlineKeyboardButton(text='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    but4 = types.InlineKeyboardButton(text='üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    but5 = types.InlineKeyboardButton(text='üåü –û—Ç–∑—ã–≤—ã –±–æ—Ç–∞', callback_data='üåü –û—Ç–∑—ã–≤—ã –±–æ—Ç–∞')
    mrk.row(but1, but3)
    mrk.add(but4, but2)
    mrk.add(but5)
    if m.from_user.id in ADMINID:
        buta = types.InlineKeyboardButton(text='‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
        mrk.add(buta)
    data = load_users()
    if not str(m.from_user.id) in data:
        with open('users.json', 'w', encoding='utf8')as f:
            data[str(m.from_user.id)] = {
                'username': m.from_user.username,
                'balance': 0,
                'purchases': ''
            }
            json.dump(data, f, ensure_ascii=False, indent=4)
    photo = open('startphoto.jpg', 'rb')
    bot.send_photo(chat_id=m.from_user.id, photo=photo, caption=f'üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {m.from_user.username}*\n------------------------------------\nüí≥ –±–∞–ª–∞–Ω—Å: `{data[str(m.from_user.id)]['balance']}`\nüåü –≤–∞—à–∏ –ø–æ–∫—É–ø–∫–∏: `–î–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ø—Ä–æ—Ñ–∏–ª—å"`\n------------------------------------\n*–ú–∞–≥–∞–∑–∏–Ω —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø–æ —Å–∞–º—ã–º –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', parse_mode='Markdown', reply_markup=mrk)

@bot.callback_query_handler(func=lambda call: call.data=='üë§ –ü—Ä–æ—Ñ–∏–ª—å')
def account(call: types.CallbackQuery):
   
    mrk = types.InlineKeyboardMarkup(row_width=1)
    but2 = types.InlineKeyboardButton(text='üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', callback_data='üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
    but3 = types.InlineKeyboardButton(text='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    but4 = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    mrk.row(but2, but3)
    mrk.add(but4)
    bot.answer_callback_query(call.id, f"üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    bot.send_message(chat_id=call.from_user.id, text='üóÇ')
    with open('users.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    purchases = data[str(call.from_user.id)]['purchases']
    datapurchases = ''
    for i in purchases:
        if i == ' ':
            x = i.replace(' ', '\n')
            datapurchases+=x
        else:
            datapurchases+=i
    mes = bot.send_message(chat_id=call.from_user.id, text=f'*üë§ –ü—Ä–æ—Ñ–∏–ª—å {call.from_user.username}*\n\nID: {call.from_user.id}\n–ë–∞–ª–∞–Ω—Å: {data[str(call.from_user.id)]['balance']}‚ÇΩ\n\n*–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:*\n{datapurchases}', parse_mode="Markdown", reply_markup=mrk)
    current_message.update({str(call.from_user.id): mes.message_id})

@bot.callback_query_handler(func=lambda call: call.data=='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def mainmenu(call: types.CallbackQuery):
    bot.delete_message(chat_id=call.from_user.id, message_id=current_message[str(call.from_user.id)])
    start(m=call)

@bot.callback_query_handler(func=lambda call: call.data=='üåü –û—Ç–∑—ã–≤—ã –±–æ—Ç–∞')
def review(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, f"üåü –û—Ç–∑—ã–≤—ã –±–æ—Ç–∞")
    mrk = types.InlineKeyboardMarkup(row_width=2)
    but4 = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    mrk.add(but4)
    mrk.add(types.InlineKeyboardButton(text='‚ö° –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url='https://t.me/neganworks'))
    mes = bot.send_message(chat_id=call.from_user.id, text=f'üåü *–û—Ç–∑—ã–≤—ã –±–æ—Ç–∞ –æ—Ç –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ*, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', parse_mode='Markdown', reply_markup=mrk)
    current_message.update({str(call.from_user.id): mes.message_id})

items_per_page = 4
current_page = {}
user_catalog_message_ids = {}


def generate_keyboard(keys_on_page, total_pages, chat_id):
    try:
        with open('lots.json', 'r', encoding='utf-8') as f:
            lots_data = json.load(f)
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª lots.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        lots_data = {}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª lots.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç.")
        lots_data = {}
    keyboard = types.InlineKeyboardMarkup()
    for key in keys_on_page:
        if key in lots_data and all(k in lots_data[key] for k in ['country', 'otlega', 'price']) and lots_data[key]['status'] == '–ê–∫—Ç–∏–≤–µ–Ω':
            keyboard.add(types.InlineKeyboardButton(text=f'{lots_data[key]['country']} || {lots_data[key]['otlega']} || {lots_data[key]['price']}‚ÇΩ', callback_data=f'–ª–æ—Ç‚Ññ{key}'))
        else:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –õ–æ—Ç {key} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (country, otlega, price).")
    page_num_display = current_page.get(chat_id, 1)
    count = types.InlineKeyboardButton(text=f'{page_num_display}/{total_pages}', callback_data='no_action')
    if page_num_display > 1 and page_num_display < total_pages:
        keyboard.row(types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data='prev_page'), count, types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data='next_page'))
    elif page_num_display > 1:
        keyboard.row(types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data='prev_page'), count)
    elif page_num_display < total_pages and page_num_display > 1:
        keyboard.row(types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data='prev_page'), count, types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data='next_page'))
    elif page_num_display < total_pages:
        keyboard.row(count, types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data='next_page'))
    but5  = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    keyboard.add(but5)
    return keyboard

def show_page(chat_id, total_pages):
    
    try:
        with open('lots.json', 'r', encoding='utf-8') as f:
            lots_data = json.load(f)
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª lots.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        lots_data = {}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª lots.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç.")
        lots_data = {}
    page_number = current_page.get(chat_id, 1) 
    start_index = (page_number - 1) * items_per_page
    end_index = start_index + items_per_page    
    all_lot_keys = list(lots_data.keys())
    keys_on_page = all_lot_keys[start_index:end_index]
    keyboard = generate_keyboard(keys_on_page, total_pages, chat_id)
    caption_text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ *–∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä–æ–≤*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –Ω–æ–º–µ—Ä' 
    if chat_id in user_catalog_message_ids:
        try:
            bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=user_catalog_message_ids[chat_id],
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            try:
                with open('ourlots.jpg', 'rb') as photo_file:
                    message = bot.send_photo(
                        chat_id=chat_id,
                        photo=photo_file,
                        caption=caption_text,
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
                user_catalog_message_ids[chat_id] = message.message_id
                current_message.update({str(chat_id): user_catalog_message_ids[chat_id]})
            except FileNotFoundError:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞")
            except Exception as send_e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {send_e}")
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞.")  
    else:
        try:
            with open('ourlots.jpg', 'rb') as photo_file:
                message = bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_file,
                    caption=caption_text,
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
            user_catalog_message_ids[chat_id] = message.message_id
            current_message.update({str(chat_id): user_catalog_message_ids[chat_id]})
        except FileNotFoundError:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞")
        except Exception as send_e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {send_e}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞.")


@bot.callback_query_handler(func=lambda call: call.data == 'üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
def catalogx(call: types.CallbackQuery):
    try:
        with open('lots.json', 'r', encoding='utf-8') as f:
            lots_data = json.load(f)
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª lots.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        lots_data = {}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª lots.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç.")
        lots_data = {}
    bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤...")
    chat_id = call.from_user.id
    try:
        total_items = len(lots_data)
        total_pages = (total_items + items_per_page - 1) // items_per_page
        if total_pages == 0:
            bot.send_message(chat_id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤.")
            return
        current_page[chat_id] = 1
        show_page(chat_id, total_pages)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ catalogx: {e}")
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")

@bot.callback_query_handler(func=lambda call: call.data in ['next_page', 'prev_page', 'no_action'])
def handle_navigation(call: types.CallbackQuery):
    try:
        with open('lots.json', 'r', encoding='utf-8') as f:
            lots_data = json.load(f)
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª lots.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        lots_data = {}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª lots.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç.")
        lots_data = {}
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)
    if chat_id not in current_page:
        bot.send_message(chat_id, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ç–µ—Ä—è–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ.")
        return

    total_items = len(lots_data)
    total_pages = (total_items + items_per_page - 1) // items_per_page
    if total_pages == 0:
        bot.edit_message_caption(
            chat_id=chat_id,
            message_id=user_catalog_message_ids.get(chat_id),
            caption="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤.",
            parse_mode='Markdown',
            reply_markup=None
        )
        return

    if call.data == 'next_page':
        if current_page[chat_id] < total_pages:
            current_page[chat_id] += 1
            show_page(chat_id, total_pages)
    elif call.data == 'prev_page':
        if current_page[chat_id] > 1:
            current_page[chat_id] -= 1
            show_page(chat_id, total_pages)
    

    
@bot.callback_query_handler(func=lambda call: call.data.startswith('–ª–æ—Ç‚Ññ'))
def eachlot(call: types.CallbackQuery):
    number = call.data.replace('–ª–æ—Ç‚Ññ', '')
    bot.answer_callback_query(call.id, f"–ª–æ—Ç‚Ññ{number[-4:]}")
    password = ''
    numx = ''
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
            for i in data[number]['pass']:
                password+='-'
            for i in data[number]:
                numx+='-'
            if data[number]['status'] != '–ê–∫—Ç–∏–≤–µ–Ω':
                bot.send_message(chat_id=call.from_user.id, text='*–õ–æ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω!*\n–ü—Ä–∏—Å–º–æ—Ç—Ä–∏—Ç–µ—Å—å –∫ –¥—Ä—É–≥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º :)', parse_mode='Markdown')
                return '–ö—É–ø–ª–µ–Ω'
        mrk = types.InlineKeyboardMarkup(row_width=1)
        buy = types.InlineKeyboardButton(text='‚úÖ –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä', callback_data=f'‚úÖ –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä{number}')
        backtocatalog = types.InlineKeyboardButton(text='‚Ü© –û–±—Ä–∞—Ç–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data='backcatalog')
        mrk.row(buy, backtocatalog)
        bot.send_message(
        chat_id=call.from_user.id,
        text=(
            f'–õ–æ—Ç *‚Ññ{number[-4:]}*:\n'
            f'–ù–æ–º–µ—Ä: *{numx}* (—Å–∫—Ä—ã—Ç)\n'
            f'–ü–∞—Ä–æ–ª—å: *{password}* (—Å–∫—Ä—ã—Ç)\n'
            f'–û—Ç–ª–µ–≥–∞: *{data[number]["otlega"]}*\n'
            f'–¢–∏–ø –≤—ã–¥–∞—á–∏: *{data[number]["type"]}*\n'
            f'–¶–µ–Ω–∞: *{data[number]["price"]}‚ÇΩ*\n\n'
            'üí° –°–∫—Ä—ã—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ *–ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏* –Ω–æ–º–µ—Ä–∞\n\n'
            'üîë –õ–æ—Ç —Å —Ç–∏–ø–æ–º –≤—ã–¥–∞—á–∏ "–†—É—á–Ω–æ–π" –≤—ã–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n\n'
            'ü§ñ –õ–æ—Ç —Å —Ç–∏–ø–æ–º –≤—ã–¥–∞—á–∏ "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" –≤—ã–¥–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π, *–æ–ø–ª–∞—Ç–∞ —Ç–∞–∫ –∂–µ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*\n\n'
            '‚ùóÔ∏è –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –≤–∞–º –Ω—É–∂–Ω–æ *–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç*, –∏–Ω–∞—á–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
        ),
        parse_mode='Markdown',
        reply_markup=mrk
        )   
    except Exception as e:
        print(e)
        bot.send_message(chat_id=call.from_user.id, text=f'*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∞!*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ—Ç', parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('backcatalog'))
def backcatalog(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚Ü©")
    catalogx(call=call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('‚úÖ –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä'))
def stepbuy(call: types.CallbackQuery):
    number = call.data.replace('‚úÖ –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä', '')
    bot.answer_callback_query(call.id, f"‚úÖ –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")
    mrk = types.InlineKeyboardMarkup(row_width=1)
    mrk.add(types.InlineKeyboardButton(text='‚ö° –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è, –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ', callback_data=f'–ø–æ–∫—É–ø–∫–∞{number}'))
    with open('lots.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    if data[number]['status'] == '–ê–∫—Ç–∏–≤–µ–Ω':
        bot.send_message(
        chat_id=call.from_user.id,
        text='–ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –æ–∑–Ω–∞–∫–æ–º—Ç–µ—Å—å —Å <a href="https://teletype.in/@negan_smith_shop/aHbYCA4LAsC">–ø—Ä–∞–≤–∏–ª–∞–º–∏</a> –±–æ—Ç–∞.',
        parse_mode='HTML', 
        reply_markup=mrk,
        disable_web_page_preview=True
            )
@bot.callback_query_handler(func=lambda call: call.data.startswith('–ø–æ–∫—É–ø–∫–∞'))
def buynum(call: types.CallbackQuery):
    global numbertosend
    numbertosend = ''
    bot.answer_callback_query(call.id, f"–ø–æ–∫—É–ø–∫–∞")
    number = call.data.replace('–ø–æ–∫—É–ø–∫–∞', '')
    numbertosend+=number
    with open('users.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    with open('lots.json', 'r', encoding='utf8')as x:
        numbers = json.load(x)
    if data[str(call.from_user.id)]['balance'] >= float(numbers[number]['price']):
        if numbers[number]['status'] == '–ê–∫—Ç–∏–≤–µ–Ω':
            deupdate_balance(user_id=str(call.from_user.id), amount_to_min=float(numbers[number]['price']))
            with open('lots.json', 'w', encoding='utf8')as z:
                numbers[number]['status'] = "–ö—É–ø–ª–µ–Ω"
                numbers[number]['buyer'] = str(call.from_user.id)
                json.dump(numbers, z, ensure_ascii=False, indent=4)
            
            mrk = types.InlineKeyboardMarkup(row_width=1)
            but1 = types.InlineKeyboardButton(text='üì≤ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥', callback_data=f'üì≤ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥{number}')
            but2 = types.InlineKeyboardButton(text='üîì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ', callback_data=f'üîì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ{number}')
            mrk.row(but1, but2)
            bot.send_message(
            chat_id=call.from_user.id,
            text=(
                f'–õ–æ—Ç *‚Ññ{number[-4:]}*:\n'
                f'–ù–æ–º–µ—Ä: *{number}* \n'
                f'–ü–∞—Ä–æ–ª—å: *{numbers[number]['pass']}*\n'
                f'–û—Ç–ª–µ–≥–∞: *{numbers[number]["otlega"]}*\n'
                f'–¢–∏–ø –≤—ã–¥–∞—á–∏: *{numbers[number]["type"]}*\n'
                f'–¶–µ–Ω–∞: *{numbers[number]["price"]}‚ÇΩ*\n\n'
                '‚ùóÔ∏è –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –≤–∞–º –Ω—É–∂–Ω–æ *–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç*, –∏–Ω–∞—á–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n'
                f'_–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–ª–∞–Ω –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç_\n–ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø—Ä–∏—à–µ–ª *–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*'
            ),
            parse_mode='Markdown',
            reply_markup=mrk
            )  

            if numbers[number]["type"] == '–†—É—á–Ω–æ–π':
                for id in ADMINID:
                    bot.send_message(chat_id=id, 
                    text=(
                        f'*–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!*\n\n'
                        f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {call.from_user.username}\n'
                        f'–õ–æ—Ç *‚Ññ{number[-4:]}*:\n'
                        f'–ù–æ–º–µ—Ä: *{number}* \n'
                        f'–ü–∞—Ä–æ–ª—å: *{numbers[number]['pass']}*\n'
                        f'–û—Ç–ª–µ–≥–∞: *{numbers[number]["otlega"]}*\n'
                        f'–¢–∏–ø –≤—ã–¥–∞—á–∏: *{numbers[number]["type"]}*\n'
                        f'–¶–µ–Ω–∞: *{numbers[number]["price"]}‚ÇΩ*\n\n'
                        '_–í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É_'
                    ),
                    parse_mode='Markdown',
                    )
            else:
                try:
                    for id in ADMINID:
                        bot.send_message(chat_id=id, 
                        text=(
                            f'*–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!*\n\n'
                            f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {call.from_user.username}\n'
                            f'–õ–æ—Ç *‚Ññ{number[-4:]}*:\n'
                            f'–ù–æ–º–µ—Ä: *{number}* \n'
                            f'–ü–∞—Ä–æ–ª—å: *{numbers[number]['pass']}*\n'
                            f'–û—Ç–ª–µ–≥–∞: *{numbers[number]["otlega"]}*\n'
                            f'–¢–∏–ø –≤—ã–¥–∞—á–∏: *{numbers[number]["type"]}*\n'
                            f'–¶–µ–Ω–∞: *{numbers[number]["price"]}‚ÇΩ*\n\n'
                            '_–õ–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é_'
                        ),
                        parse_mode='Markdown',
                        )
                    get_last_code_sync(phone_number=number)        
                except Exception as e:
                    print(e)
                    pass
                              
        else:
            bot.send_message(chat_id=call.from_user.id, text='*–ò–∑–≤–∏–Ω–∏—Ç–µ, –ª–æ—Ç —É–∂–µ –∫—É–ø–∏–ª–∏\n–ü—Ä–∏—Å–º–æ—Ç—Ä–∏—Ç–µ—Å—å –∫ –¥—Ä—É–≥–∏–º –ª–æ—Ç–∞–º*', parse_mode='Markdown')
    else:
        bot.send_message(chat_id=call.from_user.id, text='*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ª–æ—Ç—É*', parse_mode='Markdown')

def sendotzyv(m):
    bot.forward_message(chat_id=CHANNEL_ID, from_chat_id=m.chat.id, message_id=m.message_id)
    bot.send_message(chat_id=m.from_user.id, text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ç–∑—ã–≤! –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞ :)')

@bot.callback_query_handler(func=lambda call: call.data.startswith('üåü –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'))
def addotzyv(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "üåü –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    x = bot.send_message(chat_id=call.from_user.id, text=f'*–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ –ø—Ä–∏–º–µ—Ä—É –Ω–∏–∂–µ* ‚¨á\n`+rep @shopnegan_bot —Ö–æ—Ä–æ—à–∏–µ —Ü–µ–Ω—ã, –±—ã—Å—Ç—Ä–æ –≤—ã–¥–∞–ª–∏ –Ω–æ–º–µ—Ä`', parse_mode='Markdown')
    bot.register_next_step_handler(x, sendotzyv)

@bot.callback_query_handler(func=lambda call: call.data.startswith('üîì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ'))
def acceptnumber(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "üîì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ")
    number = call.data.replace('üîì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ', '')
    with open('lots.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    with open('users.json', 'r', encoding='utf8')as x:
        users = json.load(x)
    with open('users.json', 'w', encoding='utf8')as x:
        users[str(call.from_user.id)]['purchases'] += f'{number} '
        json.dump(users, x, ensure_ascii=False, indent=4)
    mrk = types.InlineKeyboardMarkup(row_width=1)
    mrk.add(types.InlineKeyboardButton(text='üåü –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='üåü –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'))
    bot.send_message(chat_id=data[numbertosend]['buyer'], 
                    text=('*–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É* ‚ù§\n–í–∞—à –∑–∞–∫–∞–∑:\n\n'
                        f'–õ–æ—Ç *‚Ññ{number[-4:]}*:\n'
                        f'–ù–æ–º–µ—Ä: *{number}* \n'
                        f'–ü–∞—Ä–æ–ª—å: *{data[number]['pass']}*\n'
                        f'–û—Ç–ª–µ–≥–∞: *{data[number]["otlega"]}*\n'
                        f'–¢–∏–ø –≤—ã–¥–∞—á–∏: *{data[number]["type"]}*\n'
                        f'–¶–µ–Ω–∞: *{data[number]["price"]}‚ÇΩ*\n\n'
                        '*‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ*\n'
                        '–ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!'
                    ), 
                    parse_mode='Markdown',
                    reply_markup=mrk)
    
    time.sleep(2)
    with open('users.json', 'r', encoding='utf8')as x:
        users = json.load(x)
    del data[number]
    with open('lots.json', 'w', encoding='utf8')as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    
    

@bot.callback_query_handler(func=lambda call: call.data.startswith('üì≤ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥'))
def reqcode(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "üì≤ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥")
    number = call.data.replace('üì≤ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥', '')
    with open('lots.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    if data[number]['type'] == '–†—É—á–Ω–æ–π':
        mrk = types.InlineKeyboardMarkup(row_width=1)
        but1 = types.InlineKeyboardButton(text='üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥', callback_data=f'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥{number}')
        mrk.add(but1)
        bot.send_message(chat_id=call.from_user.id, text='*–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞*', parse_mode='Markdown')
        for id in ADMINID:
            bot.send_message(chat_id=id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{call.from_user.username}* –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä *{number}* ', parse_mode='Markdown', reply_markup=mrk)
    
        

@bot.callback_query_handler(func=lambda call: call.data.startswith('üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥'))
def sendcode(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥")
    global numbertosend
    numbertosend = ''
    numbertosend+=call.data.replace('üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥', '')
    x = bot.send_message(chat_id=call.from_user.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥:')
    bot.register_next_step_handler(x, codesend)
    
@bot.callback_query_handler(func=lambda call: call.data=='‚óÄ –ù–∞–∑–∞–¥')
def back(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚óÄ –ù–∞–∑–∞–¥")
    start(m=call)

@bot.callback_query_handler(func=lambda call: call.data=='‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
def adminconsole(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    if call.from_user.id in ADMINID:
        mrk = types.InlineKeyboardMarkup(row_width=1)
        but1 = types.InlineKeyboardButton(text='üìû –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç', callback_data='üìû –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç')
        but2 = types.InlineKeyboardButton(text='ü§ñ –ó–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ', callback_data='ü§ñ –ó–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ')
        but3 = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç', callback_data='‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç')
        but4 = types.InlineKeyboardButton(text='üí≥ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='üí≥ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
        but5  = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        mrk.add(but1, but2, but3, but4)
        mrk.add(but5)
        mes = bot.send_message(chat_id=call.from_user.id, text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{call.from_user.username}*\n–≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', parse_mode='Markdown', reply_markup=mrk)
        current_message.update({str(call.from_user.id): mes.message_id})

@bot.callback_query_handler(func=lambda call: call.data=='üí≥ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
def delcard(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç")
    try:
        with open('cards.json', 'r', encoding='utf8')as f:
            data = json.load(f)
            mrk = types.InlineKeyboardMarkup(row_width=1)
            for key in data:
                mrk.add(types.InlineKeyboardButton(text=f'{key} | {data[key]['amount']} ‚ùå', callback_data=f'remove{key}'))
            but5  = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            mrk.add(but5)
            bot.send_message(chat_id=call.from_user.id, text='*–ó–∞—è–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*', parse_mode='Markdown', reply_markup=mrk)
    except:
        bot.send_message(chat_id=call.from_user.id, text='*–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!*', parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove'))
def remcard(call: types.CallbackQuery):
    lot = call.data.replace('remove', '')
    bot.answer_callback_query(call.id, "rem")
    with open('cards.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    del data[lot]
    with open('cards.json', 'w', encoding='utf8')as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    bot.send_message(chat_id=call.from_user.id, text=f'*–ó–∞—è–≤–∫–∞ ‚Ññ{lot} —É–¥–∞–ª–µ–Ω–∞*', parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data=='‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç')
def dellot(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚ùå –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç")
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
            mrk = types.InlineKeyboardMarkup(row_width=1)
            for key in data:
                mrk.add(types.InlineKeyboardButton(text=f'{key} | {data[key]['status']} ‚ùå', callback_data=f'del{key}'))
            but5  = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            mrk.add(but5)
            mes = bot.send_message(chat_id=call.from_user.id, text='*–õ–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*', parse_mode='Markdown', reply_markup=mrk)
            current_message.update({str(call.from_user.id): mes.message_id})
    except:
        bot.send_message(chat_id=call.from_user.id, text='*–ù–µ—Ç –ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!*', parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('del'))
def dellott(call: types.CallbackQuery):
    lot = call.data.replace('del', '')
    bot.answer_callback_query(call.id, "del")
    with open('lots.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    del data[lot]
    with open('lots.json', 'w', encoding='utf8')as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    bot.send_message(chat_id=call.from_user.id, text=f'*–õ–æ—Ç ‚Ññ{lot} —É–¥–∞–ª–µ–Ω*', parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data=='ü§ñ –ó–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ')
def supportmod(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "ü§ñ –ó–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ")
    try:
        with open('support.json', 'r', encoding='utf8')as f:
            data = json.load(f)
            mrk = types.InlineKeyboardMarkup(row_width=1)
            for key in data:
                mrk.add(types.InlineKeyboardButton(text=f'–∑–∞—è–≤–∫–∞ ‚Ññ{key} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data[key]['id']}', callback_data=f'–∑–∞—è–≤–∫–∞{key}'))
            bot.send_message(chat_id=call.from_user.id, text='ü§ñ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', reply_markup=mrk)
    except FileNotFoundError:
        data = {}
        bot.send_message(chat_id=call.from_user.id, text='ü§ñ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n*–ó–∞—è–≤–æ–∫ –Ω–µ—Ç*', parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('–∑–∞—è–≤–∫–∞'))
def supportansw(call: types.CallbackQuery):
    uid = call.data.replace('–∑–∞—è–≤–∫–∞', '')
    bot.answer_callback_query(call.id, f"–ó–∞—è–≤–∫–∞ ‚Ññ{uid}")
    with open('support.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    mrk = types.InlineKeyboardMarkup(row_width=1)
    but1 = types.InlineKeyboardButton(text='‚úç –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'‚úç –û—Ç–≤–µ—Ç–∏—Ç—å{uid}')
    but2 = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f'‚ùå –£–¥–∞–ª–∏—Ç—å{uid}')
    mrk.row(but1, but2)
    bot.send_message(chat_id=call.from_user.id, text=f'–ó–∞—è–≤–∫–∞ *‚Ññ{uid}* –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data[uid]['id']}:\n_{data[uid]['text']}_', parse_mode='Markdown', reply_markup=mrk) 

@bot.callback_query_handler(func=lambda call: call.data.startswith('‚ùå –£–¥–∞–ª–∏—Ç—å'))
def supportansw(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚ùå –£–¥–∞–ª–∏—Ç—å")
    uid = call.data.replace('‚ùå –£–¥–∞–ª–∏—Ç—å', '')
    with open('support.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    del data[uid]
    with open('support.json', 'w', encoding='utf8')as x:
        json.dump(data, x, ensure_ascii=False, indent=4)
    bot.send_message(chat_id=call.from_user.id, text=f'–∑–∞—è–≤–∫–∞ ‚Ññ{uid} —É–¥–∞–ª–µ–Ω–∞')



def answersupport(m):
    with open('support.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    user = data[currzayavka]['id']
    bot.send_message(chat_id=user, text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–∑–∞—è–≤–∫–∞ ‚Ññ{currzayavka}):\n{m.text}')
    bot.send_message(chat_id=m.from_user.id, text=f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ')

@bot.callback_query_handler(func=lambda call: call.data.startswith('‚úç –û—Ç–≤–µ—Ç–∏—Ç—å'))
def supportansw(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚úç –û—Ç–≤–µ—Ç–∏—Ç—å")
    uid = call.data.replace('‚úç –û—Ç–≤–µ—Ç–∏—Ç—å', '')
    x = bot.send_message(chat_id=call.from_user.id, text=f'–ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Ññ{uid}')
    global currzayavka
    currzayavka = ''
    currzayavka+=uid
    bot.register_next_step_handler(x, answersupport)

@bot.callback_query_handler(func=lambda call: call.data=='üìû –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç')
def addlot(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "üìû –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç")
    lots = ''
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
        for key in data:
            lots+=f'{key}\n–°—Ç—Ä–∞–Ω–∞: {data[key]['country']}\n–æ—Ç–ª–µ–≥–∞: {data[key]['otlega']}\n–ø–∞—Ä–æ–ª—å: {data[key]['pass']}\n—Å–ø–æ—Å–æ–± –≤—ã–¥–∞—á–∏: {data[key]['type']}\n—Å—Ç–∞—Ç—É—Å: {data[key]['status']}\n\n'
    except FileNotFoundError:
        lots+='*–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!*'
        data = {}
    mrk = types.InlineKeyboardMarkup(row_width=1)
    but1 = types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', callback_data='‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä')
    mrk.add(but1)
    bot.send_message(chat_id=call.from_user.id, text=f'–¢–µ–∫—É—â–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –ª–æ—Ç–∞—Ö:\n{lots}', parse_mode='Markdown', reply_markup=mrk)



def numbernextstep(m):
    user_states[m.from_user.id] = {'step': 'waiting_phone'}
    global num
    num = ''
    num += m.text
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    with open('lots.json', 'w', encoding='utf8')as x:
        data[str(num)] = {
            'country': 0,
            'otlega': 0,
            'pass': 0,
            'type': 0,
            'price': 0,
            'status': 0
        }
        json.dump(data, x, ensure_ascii=False, indent=4)
    x = bot.send_message(chat_id=m.from_user.id, text='–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–æ–º–µ—Ä–∞')
    bot.register_next_step_handler(x, countrynextstep)

def countrynextstep(m):
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    with open('lots.json', 'w', encoding='utf8')as x:
        data[str(num)] = {
            'country': m.text,
            'otlega': 0,
            'pass': 0,
            'type': 0,
            'price': 0,
            'status': 0
        }
        json.dump(data, x, ensure_ascii=False, indent=4)
    x = bot.send_message(chat_id=m.from_user.id, text='–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–ª–µ–≥—É –Ω–æ–º–µ—Ä–∞')
    bot.register_next_step_handler(x, otleganextstep)

def otleganextstep(m):
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    with open('lots.json', 'w', encoding='utf8')as x:
        data[str(num)] = {
            'country': data[str(num)]['country'],
            'otlega': m.text,
            'pass': 0,
            'type': 0,
            'price': 0,
            'status': 0
        }
        json.dump(data, x, ensure_ascii=False, indent=4)
    x = bot.send_message(chat_id=m.from_user.id, text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞')
    bot.register_next_step_handler(x, passnextstep)

def passnextstep(m):
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    with open('lots.json', 'w', encoding='utf8')as x:
        data[str(num)] = {
            'country': data[str(num)]['country'],
            'otlega': data[str(num)]['otlega'],
            'pass': m.text,
            'type': 0,
            'price': 0,
            'status': 0,
            'buyer': ''
        }
        json.dump(data, x, ensure_ascii=False, indent=4)
    x = bot.send_message(chat_id=m.from_user.id, text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö)')
    bot.register_next_step_handler(x, pricenextstep)

def pricenextstep(m):
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    with open('lots.json', 'w', encoding='utf8')as x:
        data[str(num)] = {
            'country': data[str(num)]['country'],
            'otlega': data[str(num)]['otlega'],
            'pass': data[str(num)]['pass'],
            'type': 0,
            'price': int(m.text),
            'status': 0
        }
        json.dump(data, x, ensure_ascii=False, indent=4)
    mrk = types.InlineKeyboardMarkup(row_width=1)
    mrk.add(types.InlineKeyboardButton(text='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π', callback_data=f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π{num}'), types.InlineKeyboardButton(text='–†—É—á–Ω–æ–π', callback_data=f'–†—É—á–Ω–æ–π{num}'))
    x = bot.send_message(chat_id=m.from_user.id, text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–¥–∞—á–∏', reply_markup=mrk)

    
@bot.callback_query_handler(func=lambda call: call.data.startswith('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π'))
def auto(call: types.CallbackQuery):
    num = call.data.replace('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π', '')
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    with open('lots.json', 'w', encoding='utf8')as x:
        data[str(num)] = {
            'country': data[str(num)]['country'],
            'otlega': data[str(num)]['otlega'],
            'pass': data[str(num)]['pass'],
            'type': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π',
            'price': data[str(num)]['price'],
            'status': '–ê–∫—Ç–∏–≤–µ–Ω',
            'buyer': ''
        }
        json.dump(data, x, ensure_ascii=False, indent=4)
    x = bot.send_message(chat_id=call.from_user.id, text='–°—É–ø–µ—Ä, –°–æ–∑–¥–∞—é —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –ª–æ—Ç–∞...')
    chat_id = call.from_user.id
    phone = num
    Thread(target=tg_auth.start_auth, args=(phone, chat_id)).start()
        
    

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('waiting_code') or user_states.get(m.chat.id, {}).get('waiting_password'))
def handle_auth(message):
    chat_id = message.chat.id
    user_data = user_states.get(chat_id, {})
    text = message.text.strip()
    
    def process_auth():
        if user_data.get('waiting_code'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if tg_auth.confirm_code(chat_id, text):
                bot.send_message(chat_id, "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
            else:
                if user_states.get(chat_id, {}).get('waiting_password'):
                    # –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º –ø–∞—Ä–æ–ª—å 2FA (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ confirm_code)
                    pass
                else:
                    bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        elif user_data.get('waiting_password'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è 2FA
            if tg_auth.confirm_password(chat_id, text):
                bot.send_message(chat_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    Thread(target=process_auth).start()


@bot.callback_query_handler(func=lambda call: call.data.startswith('–†—É—á–Ω–æ–π'))
def hand(call: types.CallbackQuery):
    num = call.data.replace('–†—É—á–Ω–æ–π', '')
    try:
        with open('lots.json', 'r', encoding='utf8')as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    with open('lots.json', 'w', encoding='utf8')as x:
        data[str(num)] = {
            'country': data[str(num)]['country'],
            'otlega': data[str(num)]['otlega'],
            'pass': data[str(num)]['pass'],
            'type': '–†—É—á–Ω–æ–π',
            'price': data[str(num)]['price'],
            'status': '–ê–∫—Ç–∏–≤–µ–Ω',
            'buyer': ''
        }
        json.dump(data, x, ensure_ascii=False, indent=4)
    bot.send_message(chat_id=call.from_user.id, text='–°—É–ø–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã—Å—Ç–∞–≤–ª—è—é –ª–æ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥...')



@bot.callback_query_handler(func=lambda call: call.data=='‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä')
def addnumber(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä")
    x = bot.send_message(chat_id=call.from_user.id, text=f'*–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*', parse_mode='Markdown')
    bot.register_next_step_handler(x, numbernextstep)
    

@bot.callback_query_handler(func=lambda call: call.data=='üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
def support(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    x = bot.send_message(chat_id=call.from_user.id, text=f'*–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É*', parse_mode='Markdown')
    bot.register_next_step_handler(x, support_next_step)

@bot.callback_query_handler(func=lambda call: call.data=='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
def balance(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    mrk = types.InlineKeyboardMarkup(row_width=1)
    crypto = types.InlineKeyboardButton(text='Crypto Pay', callback_data='Crypto Pay')
    paymaster = types.InlineKeyboardButton(text='–ö–∞—Ä—Ç–∞ –†–§', callback_data='–ö–∞—Ä—Ç–∞ –†–§')
    mrk.row(crypto, paymaster)
    bot.send_message(call.from_user.id, '‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*', parse_mode='Markdown', reply_markup=mrk)

@bot.callback_query_handler(func=lambda call: call.data=='–ö–∞—Ä—Ç–∞ –†–§')
def cryptopay(call:types.CallbackQuery):
    bot.answer_callback_query(call.id, "–ö–∞—Ä—Ç–∞ –†–§")
    x = bot.send_message(chat_id=call.from_user.id, text=f'*–ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞* (–≤ —Ä—É–±–ª—è—Ö)\n_–ø—Ä–∏–º–µ—Ä_: 5.0', parse_mode='Markdown')
    bot.register_next_step_handler(x, next_step_card)

@bot.callback_query_handler(func=lambda call: call.data=='Crypto Pay')
def cardtopay(call:types.CallbackQuery):
    bot.answer_callback_query(call.id, "Crypto Pay")
    x = bot.send_message(chat_id=call.from_user.id, text=f'*–ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞* (–≤ USDT)\n_–ø—Ä–∏–º–µ—Ä_: 5.0', parse_mode='Markdown')
    bot.register_next_step_handler(x, create_invoice)



@bot.callback_query_handler(func=lambda call: call.data.startswith('–æ–ø–ª–∞—Ç–∏–ª'))
def accept(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "–ü—Ä–æ–≤–µ—Ä—è—é...")
    try:
        invoice = crypto.get_invoices(invoice_ids=call.data.replace('–æ–ø–ª–∞—Ç–∏–ª', ''))
        if str(invoice['items'][0]['invoice_id']) == str(call.data.replace('–æ–ø–ª–∞—Ç–∏–ª', '')):
            if invoice['items'][0]['status'] == 'paid':
                if not checkinvoice(invoice['items'][0]['invoice_id']):
                    paid(invoice['items'][0]['invoice_id'])
                    amount = float(invoice['items'][0]['amount']) * 74
                    amount = round(amount, 2)
                    mess = bot.send_message(chat_id=call.from_user.id, text='*–°—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω!*\n_–ü–æ–ø–æ–ª–Ω—è—é –±–∞–ª–∞–Ω—Å..._', parse_mode='Markdown')
                    update_balance(user_id=str(call.from_user.id), amount_to_add=amount)
                    bot.edit_message_text(text=f'_–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ_ *{amount}‚ÇΩ*', parse_mode='Markdown', chat_id=call.from_user.id, message_id=mess.message_id)  
                    time.sleep(1)
                else: 
                    bot.send_message(chat_id=call.from_user.id, text=f'—á–µ–∫ *{invoice['items'][0]['invoice_id']}* —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å!', parse_mode='Markdown')
            else:
                bot.send_message(chat_id=call.from_user.id, text='*–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç!*', parse_mode='Markdown')
           
    except Exception as e:
        print(e)
        bot.send_message(chat_id=call.from_user.id, text=f'–æ—à–∏–±–∫–∞ —Å —á–µ–∫–æ–º *{invoice['items'][0]['invoice_id']}*', parse_mode='Markdown')
    
@bot.callback_query_handler(func=lambda call: call.data.startswith('‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))       
def apply(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    userid = call.data.replace('‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', '')
    with open('cards.json', 'r', encoding='utf8')as f:
        data = json.load(f)
    amount = data[str(userid)]['amount']
    update_balance(user_id=str(userid), amount_to_add=amount)
    remove_dict_from_json(key_to_remove=str(userid))
    mrk = types.InlineKeyboardMarkup(row_width=1)
    but5  = types.InlineKeyboardButton(text='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='üñ• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    mrk.add(but5)
    mes = bot.send_message(chat_id=userid, text=f'–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ *{amount}*\n–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!', parse_mode='Markdown',reply_markup=mrk)
    current_message.update({str(userid): mes.message_id})

@bot.callback_query_handler(func=lambda call: call.data.startswith('‚ùå –ß–µ–∫ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'))       
def decline(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, "‚ùå –ß–µ–∫ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    userid = call.data.replace('‚ùå –ß–µ–∫ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π', '')
    remove_dict_from_json(key_to_remove=str(userid))
    bot.send_message(chat_id=userid, text='*–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–µ–∫–∞. –ë–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑*', parse_mode='Markdown')





bot.infinity_polling(logger_level=logging.INFO)